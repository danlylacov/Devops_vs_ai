name: CI/CD

on:
  push:
    branches: [ "by_chatGPT" ]

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository }}-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.repository }}-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ env.IMAGE_BACKEND }}:latest

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ env.IMAGE_FRONTEND }}:latest
          build-args: |
            VITE_API_URL=/api

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Copy compose & env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml,.env.prod"
          target: "~/app"

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/app
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            # подменим build на образы из реестра
            cat > docker-compose.override.yml <<'EOF'
            services:
              backend:
                image: $IMAGE_BACKEND
                build: null
              frontend:
                image: $IMAGE_FRONTEND
                build: null
            EOF
            export IMAGE_BACKEND=${{ env.IMAGE_BACKEND }}:latest
            export IMAGE_FRONTEND=${{ env.IMAGE_FRONTEND }}:latest
            docker compose pull
            docker compose up -d --remove-orphans
